{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/serban/Desktop/bytes/src/components/CheckoutForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { BookContext } from \"../context/books\";\nimport { CartContext } from \"../context/cart\";\nimport { CardElement, useElements, useStripe } from \"@stripe/react-stripe-js\";\nconst CARD_ELEMENT_OPTIONS = {\n  style: {\n    base: {\n      color: \"#32325d\",\n      fontFamily: '\"Helvetica Neue\", Helvetica, sans-serif',\n      fontSmoothing: \"antialiased\",\n      fontSize: \"16px\",\n      \"::placeholder\": {\n        color: \"#aab7c4\"\n      }\n    },\n    invalid: {\n      color: \"#fa755a\",\n      iconColor: \"#fa755a\"\n    }\n  }\n};\n\nconst CheckoutForm = () => {\n  _s();\n\n  const {\n    cart,\n    total,\n    clearCart\n  } = useContext(CartContext);\n  const {\n    checkout\n  } = useContext(BookContext);\n  const [orderDetails, setOrderDetails] = useState({\n    cart,\n    total,\n    address: null,\n    token: null\n  });\n  const [error, setError] = useState(null);\n  const stripe = useStripe();\n  const elements = useElements();\n  const history = useHistory();\n  useEffect(() => {\n    if (orderDetails.token) {\n      checkout(orderDetails); //clearCart();\n      //history.push(\"/\");\n    }\n  }, [orderDetails]); // Handle real-time validation errors from the card Element.\n\n  const handleChange = event => {\n    if (event.error) {\n      setError(event.error.message);\n    } else {\n      setError(null);\n    }\n  }; // Handle form submission.\n\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    const card = elements.getElement(CardElement);\n    const result = await stripe.createToken(card);\n\n    if (result.error) {\n      // Inform the user if there was an error.\n      setError(result.error.message);\n    } else {\n      setError(null); // Send the token to your server.\n\n      const token = result.token;\n      setOrderDetails({ ...orderDetails,\n        token: token.id\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"checkout-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"checkout-address\",\n        children: \"Shipping Address\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"checkout-address\",\n        type: \"text\",\n        onChange: e => setOrderDetails({ ...orderDetails,\n          address: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stripe-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"stripe-element\",\n          children: \" Credit or debit card \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CardElement, {\n          id: \"stripe-element\",\n          options: CARD_ELEMENT_OPTIONS,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-errors\",\n        role: \"alert\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      className: \"btn\",\n      children: \"Submit Payment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CheckoutForm, \"v4/BWTlU615a86/GXRZMyaReCKk=\", false, function () {\n  return [useStripe, useElements, useHistory];\n});\n\n_c = CheckoutForm;\nexport default CheckoutForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckoutForm\");","map":{"version":3,"sources":["/home/serban/Desktop/bytes/src/components/CheckoutForm.js"],"names":["React","useState","useEffect","useContext","useHistory","BookContext","CartContext","CardElement","useElements","useStripe","CARD_ELEMENT_OPTIONS","style","base","color","fontFamily","fontSmoothing","fontSize","invalid","iconColor","CheckoutForm","cart","total","clearCart","checkout","orderDetails","setOrderDetails","address","token","error","setError","stripe","elements","history","handleChange","event","message","handleSubmit","preventDefault","card","getElement","result","createToken","id","e","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { BookContext } from \"../context/books\";\nimport { CartContext } from \"../context/cart\";\nimport { CardElement, useElements, useStripe } from \"@stripe/react-stripe-js\";\n\nconst CARD_ELEMENT_OPTIONS = {\n  style: {\n    base: {\n      color: \"#32325d\",\n      fontFamily: '\"Helvetica Neue\", Helvetica, sans-serif',\n      fontSmoothing: \"antialiased\",\n      fontSize: \"16px\",\n      \"::placeholder\": {\n        color: \"#aab7c4\"\n      }\n    },\n    invalid: {\n      color: \"#fa755a\",\n      iconColor: \"#fa755a\"\n    }\n  }\n};\n\nconst CheckoutForm = () => {\n  const { cart, total, clearCart } = useContext(CartContext);\n  const { checkout } = useContext(BookContext);\n  const [orderDetails, setOrderDetails] = useState({ cart, total, address: null, token: null });\n  const [error, setError] = useState(null);\n  const stripe = useStripe();\n  const elements = useElements();\n  const history = useHistory();\n\n  useEffect(() => {\n    if (orderDetails.token) {\n      checkout(orderDetails);\n      //clearCart();\n      //history.push(\"/\");\n    }\n  }, [orderDetails]);\n\n  // Handle real-time validation errors from the card Element.\n  const handleChange = (event) => {\n    if (event.error) {\n      setError(event.error.message);\n    } else {\n      setError(null);\n    }\n  };\n\n  // Handle form submission.\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    const card = elements.getElement(CardElement);\n    const result = await stripe.createToken(card);\n    if (result.error) {\n      // Inform the user if there was an error.\n      setError(result.error.message);\n    } else {\n      setError(null);\n      // Send the token to your server.\n      const token = result.token;\n      setOrderDetails({ ...orderDetails, token: token.id });\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div className=\"checkout-form\">\n        <label htmlFor=\"checkout-address\">Shipping Address</label>\n        <input\n          id=\"checkout-address\"\n          type=\"text\"\n          onChange={(e) => setOrderDetails({ ...orderDetails, address: e.target.value })}\n        />\n        <div className=\"stripe-section\">\n          <label htmlFor=\"stripe-element\"> Credit or debit card </label>\n          <CardElement id=\"stripe-element\" options={CARD_ELEMENT_OPTIONS} onChange={handleChange} />\n        </div>\n        <div className=\"card-errors\" role=\"alert\">\n          {error}\n        </div>\n      </div>\n      <button type=\"submit\" className=\"btn\">\n        Submit Payment\n      </button>\n    </form>\n  );\n};\n\nexport default CheckoutForm;\n"]},"metadata":{},"sourceType":"module"}