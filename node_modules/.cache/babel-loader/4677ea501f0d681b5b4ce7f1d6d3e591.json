{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/serban/Desktop/bytes/src/context/cart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nconst CartContext = /*#__PURE__*/React.createContext();\n\nconst CartProvider = ({\n  children\n}) => {\n  _s();\n\n  const [cart, setCart] = useState([]);\n  const [total, setTotal] = useState(0);\n  useEffect(() => {\n    const total = [...cart].reduce((total, {\n      price\n    }) => {\n      return total += price;\n    }, 0);\n    setTotal(parseFloat(total.toFixed(2)));\n  }, [cart]);\n\n  const addToCart = byte => {\n    const {\n      id,\n      index,\n      size,\n      price\n    } = byte;\n    const cartItem = [...cart].find(item => item.id === id);\n\n    if (cartItem) {\n      const updatedCart = [...cart].map(item => {\n        return item.id === id ? { ...item,\n          amount: item.amount + 1\n        } : item;\n      });\n      setCart(updatedCart);\n    } else {\n      const cartItems = [...cart, {\n        id,\n        index,\n        size,\n        price,\n        amount: 1\n      }];\n      setCart(cartItems);\n    }\n  };\n\n  const clearCart = () => {\n    setCart([]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cart,\n      total,\n      addToCart,\n      clearCart\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CartProvider, \"d7rM/Gu5Boo36K50NmkeLGTjXc4=\");\n\n_c = CartProvider;\nexport { CartProvider, CartContext };\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/home/serban/Desktop/bytes/src/context/cart.js"],"names":["React","useState","useEffect","CartContext","createContext","CartProvider","children","cart","setCart","total","setTotal","reduce","price","parseFloat","toFixed","addToCart","byte","id","index","size","cartItem","find","item","updatedCart","map","amount","cartItems","clearCart"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,MAAMC,WAAW,gBAAGH,KAAK,CAACI,aAAN,EAApB;;AAEA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AACrC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,CAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMO,KAAK,GAAG,CAAC,GAAGF,IAAJ,EAAUI,MAAV,CAAiB,CAACF,KAAD,EAAQ;AAAEG,MAAAA;AAAF,KAAR,KAAsB;AACnD,aAAQH,KAAK,IAAIG,KAAjB;AACD,KAFa,EAEX,CAFW,CAAd;AAGAF,IAAAA,QAAQ,CAACG,UAAU,CAACJ,KAAK,CAACK,OAAN,CAAc,CAAd,CAAD,CAAX,CAAR;AACD,GALQ,EAKN,CAACP,IAAD,CALM,CAAT;;AAOA,QAAMQ,SAAS,GAAIC,IAAD,IAAU;AAC1B,UAAM;AAAEC,MAAAA,EAAF;AAAMC,MAAAA,KAAN;AAAaC,MAAAA,IAAb;AAAmBP,MAAAA;AAAnB,QAA6BI,IAAnC;AACA,UAAMI,QAAQ,GAAG,CAAC,GAAGb,IAAJ,EAAUc,IAAV,CAAgBC,IAAD,IAAUA,IAAI,CAACL,EAAL,KAAYA,EAArC,CAAjB;;AACA,QAAIG,QAAJ,EAAc;AACZ,YAAMG,WAAW,GAAG,CAAC,GAAGhB,IAAJ,EAAUiB,GAAV,CAAeF,IAAD,IAAU;AAC1C,eAAOA,IAAI,CAACL,EAAL,KAAYA,EAAZ,GAAiB,EAAE,GAAGK,IAAL;AAAWG,UAAAA,MAAM,EAAEH,IAAI,CAACG,MAAL,GAAc;AAAjC,SAAjB,GAAwDH,IAA/D;AACD,OAFmB,CAApB;AAGAd,MAAAA,OAAO,CAACe,WAAD,CAAP;AACD,KALD,MAKO;AACL,YAAMG,SAAS,GAAG,CAAC,GAAGnB,IAAJ,EAAU;AAAEU,QAAAA,EAAF;AAAMC,QAAAA,KAAN;AAAaC,QAAAA,IAAb;AAAmBP,QAAAA,KAAnB;AAA0Ba,QAAAA,MAAM,EAAE;AAAlC,OAAV,CAAlB;AACAjB,MAAAA,OAAO,CAACkB,SAAD,CAAP;AACD;AACF,GAZD;;AAcA,QAAMC,SAAS,GAAG,MAAM;AACtBnB,IAAAA,OAAO,CAAC,EAAD,CAAP;AACD,GAFD;;AAIA,sBACE,QAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AAAED,MAAAA,IAAF;AAAQE,MAAAA,KAAR;AAAeM,MAAAA,SAAf;AAA0BY,MAAAA;AAA1B,KADT;AAAA,cAGGrB;AAHH;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CApCD;;GAAMD,Y;;KAAAA,Y;AAsCN,SAASA,YAAT,EAAuBF,WAAvB","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nconst CartContext = React.createContext();\n\nconst CartProvider = ({ children }) => {\n  const [cart, setCart] = useState([]);\n  const [total, setTotal] = useState(0);\n\n  useEffect(() => {\n    const total = [...cart].reduce((total, { price }) => {\n      return (total += price);\n    }, 0);\n    setTotal(parseFloat(total.toFixed(2)));\n  }, [cart]);\n\n  const addToCart = (byte) => {\n    const { id, index, size, price } = byte;\n    const cartItem = [...cart].find((item) => item.id === id);\n    if (cartItem) {\n      const updatedCart = [...cart].map((item) => {\n        return item.id === id ? { ...item, amount: item.amount + 1 } : item;\n      });\n      setCart(updatedCart);\n    } else {\n      const cartItems = [...cart, { id, index, size, price, amount: 1 }];\n      setCart(cartItems);\n    }\n  };\n\n  const clearCart = () => {\n    setCart([]);\n  };\n\n  return (\n    <CartContext.Provider\n      value={{ cart, total, addToCart, clearCart }}\n    >\n      {children}\n    </CartContext.Provider>\n  );\n};\n\nexport { CartProvider, CartContext };\n"]},"metadata":{},"sourceType":"module"}