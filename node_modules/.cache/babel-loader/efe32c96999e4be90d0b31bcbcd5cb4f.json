{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/serban/Desktop/bytes/src/context/bytes.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { listBytes } from \"../api/queries\";\nimport { processOrder } from \"../api/mutations\";\nconst ByteContext = /*#__PURE__*/React.createContext();\n\nconst ByteProvider = ({\n  children\n}) => {\n  _s();\n\n  const [bytes, setBytes] = useState([]);\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    fetchBytes();\n  }, []);\n\n  const checkout = async orderDetails => {\n    const payload = {\n      id: uuidv4(),\n      ...orderDetails\n    };\n\n    try {\n      await API.graphql(graphqlOperation(processOrder, {\n        input: payload\n      }));\n      console.log(\"Order is successful\");\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const fetchBytes = async () => {\n    try {\n      setLoading(true); // Switch authMode to API_KEY for public access\n\n      const {\n        data\n      } = await API.graphql({\n        query: listBytes,\n        authMode: \"API_KEY\"\n      });\n      const bytes = data.listBytes.items;\n      setBytes(bytes);\n      setLoading(false);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const toggleBit = async customer => {\n    try {\n      await API.graphql(graphqlOperation(updateByte, {\n        input: {\n          id: item.id,\n          index: item.index,\n          content: \"0\",\n          owner: customer\n        }\n      }));\n      console.log(\"toggle is successful\");\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(ByteContext.Provider, {\n    value: {\n      bytes,\n      loading,\n      checkout,\n      toggleBit\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ByteProvider, \"D3xP1PIjz4+Mt6nXjbr2vxlEeEo=\");\n\n_c = ByteProvider;\nexport { ByteContext, ByteProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"ByteProvider\");","map":{"version":3,"sources":["/home/serban/Desktop/bytes/src/context/bytes.js"],"names":["React","useEffect","useState","API","graphqlOperation","v4","uuidv4","listBytes","processOrder","ByteContext","createContext","ByteProvider","children","bytes","setBytes","loading","setLoading","fetchBytes","checkout","orderDetails","payload","id","graphql","input","console","log","err","data","query","authMode","items","toggleBit","customer","updateByte","item","index","content","owner"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,GAAT,EAAcC,gBAAd,QAAsC,aAAtC;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;AACA,SAASC,SAAT,QAA0B,gBAA1B;AACA,SAASC,YAAT,QAA6B,kBAA7B;AAEA,MAAMC,WAAW,gBAAGT,KAAK,CAACU,aAAN,EAApB;;AAEA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AACrC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACa,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAC,KAAD,CAAtC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,UAAU;AACX,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMC,QAAQ,GAAG,MAAOC,YAAP,IAAwB;AACvC,UAAMC,OAAO,GAAG;AACdC,MAAAA,EAAE,EAAEf,MAAM,EADI;AAEd,SAAGa;AAFW,KAAhB;;AAIA,QAAI;AACF,YAAMhB,GAAG,CAACmB,OAAJ,CAAYlB,gBAAgB,CAACI,YAAD,EAAe;AAAEe,QAAAA,KAAK,EAAEH;AAAT,OAAf,CAA5B,CAAN;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACD,KAHD,CAGE,OAAOC,GAAP,EAAY;AACZF,MAAAA,OAAO,CAACC,GAAR,CAAYC,GAAZ;AACD;AACF,GAXD;;AAaA,QAAMT,UAAU,GAAG,YAAY;AAC7B,QAAI;AACFD,MAAAA,UAAU,CAAC,IAAD,CAAV,CADE,CAEF;;AACA,YAAM;AAAEW,QAAAA;AAAF,UAAW,MAAMxB,GAAG,CAACmB,OAAJ,CAAY;AACjCM,QAAAA,KAAK,EAAErB,SAD0B;AAEjCsB,QAAAA,QAAQ,EAAE;AAFuB,OAAZ,CAAvB;AAIA,YAAMhB,KAAK,GAAGc,IAAI,CAACpB,SAAL,CAAeuB,KAA7B;AACAhB,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACAG,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAVD,CAUE,OAAOU,GAAP,EAAY;AACZF,MAAAA,OAAO,CAACC,GAAR,CAAYC,GAAZ;AACD;AACF,GAdD;;AAgBA,QAAMK,SAAS,GAAG,MAAOC,QAAP,IAAoB;AACpC,QAAI;AACF,YAAM7B,GAAG,CAACmB,OAAJ,CAAYlB,gBAAgB,CAAC6B,UAAD,EAAa;AAAEV,QAAAA,KAAK,EAAE;AAACF,UAAAA,EAAE,EAAEa,IAAI,CAACb,EAAV;AAAcc,UAAAA,KAAK,EAAED,IAAI,CAACC,KAA1B;AAAiCC,UAAAA,OAAO,EAAE,GAA1C;AAA+CC,UAAAA,KAAK,EAAEL;AAAtD;AAAT,OAAb,CAA5B,CAAN;AACAR,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACD,KAHD,CAGE,OAAOC,GAAP,EAAY;AACZF,MAAAA,OAAO,CAACC,GAAR,CAAYC,GAAZ;AACD;AACF,GAPD;;AASA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEb,MAAAA,KAAF;AAASE,MAAAA,OAAT;AAAkBG,MAAAA,QAAlB;AAA4Ba,MAAAA;AAA5B,KAA7B;AAAA,cACGnB;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAnDD;;GAAMD,Y;;KAAAA,Y;AAqDN,SAASF,WAAT,EAAsBE,YAAtB","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { listBytes } from \"../api/queries\";\nimport { processOrder } from \"../api/mutations\";\n\nconst ByteContext = React.createContext();\n\nconst ByteProvider = ({ children }) => {\n  const [bytes, setBytes] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    fetchBytes();\n  }, []);\n\n  const checkout = async (orderDetails) => {\n    const payload = {\n      id: uuidv4(),\n      ...orderDetails\n    };\n    try {\n      await API.graphql(graphqlOperation(processOrder, { input: payload }));\n      console.log(\"Order is successful\");\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const fetchBytes = async () => {\n    try {\n      setLoading(true);\n      // Switch authMode to API_KEY for public access\n      const { data } = await API.graphql({\n        query: listBytes,\n        authMode: \"API_KEY\"\n      });\n      const bytes = data.listBytes.items;\n      setBytes(bytes);\n      setLoading(false);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const toggleBit = async (customer) => {\n    try {\n      await API.graphql(graphqlOperation(updateByte, { input: {id: item.id, index: item.index, content: \"0\", owner: customer} }));\n      console.log(\"toggle is successful\");\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return (\n    <ByteContext.Provider value={{ bytes, loading, checkout, toggleBit }}>\n      {children}\n    </ByteContext.Provider>\n  );\n};\n\nexport { ByteContext, ByteProvider };\n"]},"metadata":{},"sourceType":"module"}